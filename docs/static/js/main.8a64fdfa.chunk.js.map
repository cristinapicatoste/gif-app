{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","categs","type","value","onChange","target","placeholder","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","console","log","GifExpertApp","props","categories","i","ReactDOM","render","document","getElementById"],"mappings":"mPAqCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,gBADJ,mBAClCC,EADkC,KACtBC,EADsB,KAczC,OACE,qCACE,8CACA,sBAAMC,SAVW,SAACC,GACpBA,EAAEC,iBACFN,GAAc,SAACO,GAAD,OAAaL,GAAb,mBAA4BK,OAE1CJ,EAAc,KAMZ,SACE,uBACEK,KAAK,OACLC,MAAOP,EACPQ,SAlBkB,SAACL,GACzBF,EAAcE,EAAEM,OAAOF,QAkBjBG,YAAY,uB,QCbPC,G,MAVK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAE9B,OACI,sBAAKC,UAAU,sBAAf,UACI,6BAAKF,IACL,qBAAKG,IAAKF,EAAKG,IAAKJ,S,+BCQjBK,EAfF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNN,EADM,iDAC0CO,UAAUF,GADpD,+DAEMG,MAAMR,GAFZ,cAENS,EAFM,gBAGWA,EAAIC,OAHf,uBAGJC,EAHI,EAGJA,KACFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAR9B,kBAYLY,GAZK,4CAAH,sDCsBEK,EAlBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EAEZpB,mBAAS,CAC/B0B,KAAM,GACNO,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAmBtC,OAZAC,qBAAU,WACNjB,EAAQC,GACHiB,MAAK,SAAAR,GACFM,EAAS,CACLT,KAAMG,EACNI,SAAS,SAKtB,CAACb,IAEGc,EDf2BI,CAAalB,GAAjCU,EAFgB,EAEtBJ,KAAcO,EAFQ,EAERA,QAGtB,OAFAM,QAAQC,IAAIP,GAGR,qCACI,6BAAKb,IAEL,qBAAKJ,UAAU,mBAAf,SAEQc,EAAOF,KAAI,SAACC,GAAD,OAAS,cAAC,EAAD,eAA8BA,GAAZA,EAAIhB,aEe/C4B,EAzBM,SAACC,GAAW,IAAD,EACM1C,mBAAS,CAC3C,SAF4B,mBACvB2C,EADuB,KACX5C,EADW,KAK9B,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG4C,EAAWf,KAAI,SAACR,EAAUwB,GAAX,OACd,cAAC,EAAD,CAAwBxB,SAAUA,GAApBA,Y,MCbxByB,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.8a64fdfa.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"Gif searcher\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setCategories((categs) => [inputValue, ...categs]);\n    // e.reset()\n    setInputValue('')\n  };\n\n  return (\n    <>\n      <h3>Add Category</h3>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Add category\"\n        />\n      </form>\n    </>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","import React from 'react';\nimport './GifGridItem.css';\n\nconst GifGridItem = ({ id, title, url }) => {\n\n    return (\n        <div className=\"GifGridItem-wrapper\">\n            <h4>{title}</h4>\n            <img src={url} alt={title}/>\n        </div>\n    )\n}\n\nexport default GifGridItem;\n","\nconst getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Yv3ObeYFk8qkgLC2fuzBdaebz3CTQgVQ`;\n    const res = await fetch(url);\n    const { data } = await res.json();\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    // setImages(gifs)\n    return gifs\n}\n\nexport default getGifs;","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport './GifGrid.css';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n    console.log(loading);\n\n    return (\n        <>\n            <h3>{category}</h3>\n            {/* {loading && <p>Buscando gifs..</p>} */}\n            <div className=\"GifGrid-cardGrid\">\n                {\n                    images.map((img) => <GifGridItem key={img.id} {...img} />)\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\";\nimport getGifs from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect(() => {\n        getGifs(category)\n            .then(img => {\n                setState({\n                    data: img,\n                    loading: false\n                })\n                // setTimeout(() => {\n                // }, 1000);\n            })\n    }, [category])\n\n    return state;\n}\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport GifGrid from \"./components/GifGrid\";\n\n//import PropTypes from \"prop-types\";\n\nconst GifExpertApp = (props) => {\n  const [categories, setCategories] = useState([\n    \"Rock\"\n  ]);\n\n  return (\n    <>\n      <h1>Gif Expert App</h1>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category, i) => (\n          <GifGrid key={category} category={category} />\n          // <li key={category[i]}>{category}</li>\n        ))}\n      </ol>\n      {/* \n      <button onClick={handleAdd}>Añadir categoría</button>\n      <button onClick={reset}>Reset</button> */}\n    </>\n  );\n};\n\n//GifExpertApp.propTypes = {};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n//GifExpertApp\n"],"sourceRoot":""}